{"version":3,"file":"static/js/162.9c53276f.chunk.js","mappings":"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","sources":["Component/SharedComponent/ModelComponent.js","app/signedin/components/dropdown/dropdown.js","pages/RecipeCategoryPage.js"],"sourcesContent":["\r\nimport React from \"react\";\r\nimport DropDownList from \"../../app/signedin/components/dropdown/dropdown\";\r\n\r\nconst ModalComponent = ({\r\n  showModal,\r\n  header,\r\n  onClose,\r\n  onSubmit,\r\n  isEditing,\r\n  formData,\r\n  setFormData,\r\n  fields,\r\n  items,\r\n  uoms,\r\n}) => {\r\n  const handleChange = (e) => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleDropdownChange = (name, selectedValue) => {\r\n    setFormData({ ...formData, [name]: selectedValue });\r\n  };\r\n\r\n  const renderFormFields = () => {\r\n    return fields.map((field, index) => {\r\n      if (field.type === \"select\") {\r\n        const options = field.name === \"item_id\" \r\n          ? items.map((item) => ({ value: item.id, label: item.itemname }))\r\n          : uoms.map((uom) => ({ value: uom.id, label: uom.uomname }));\r\n\r\n        return (\r\n          <div className=\"form-group mb-3\" key={index}>\r\n            <label>{field.label}</label>\r\n            <DropDownList\r\n              data={options}\r\n              isMulti={false} // Adjust based on your requirement\r\n              selectedValue={formData[field.name]}\r\n              placeholder={`Select ${field.label}`}\r\n              onUpdateSelectedValue={(selectedOption) =>\r\n                handleDropdownChange(field.name, selectedOption?.value)\r\n              }\r\n            />\r\n          </div>\r\n        );\r\n      }\r\n\r\n      return (\r\n        <div className=\"form-group mb-3\" key={index}>\r\n          <label>{field.label}</label>\r\n          <input\r\n            type={field.type}\r\n            name={field.name}\r\n            value={formData[field.name] || \"\"}\r\n            onChange={handleChange}\r\n            className=\"form-control\"\r\n          />\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`modal modal-overlay ${showModal ? \"d-block\" : \"d-none\"}`}\r\n      tabIndex=\"-1\"\r\n      role=\"dialog\"\r\n    >\r\n      <div className=\"modal-dialog\" role=\"document\">\r\n        <div className=\"modal-content\">\r\n          <div className=\"modal-header\">\r\n            <h5 className=\"modal-title\">\r\n              {isEditing ? \"Edit\" : \"Add\"} {header}\r\n            </h5>\r\n            <button type=\"button\" className=\"btn-close\" onClick={onClose}></button>\r\n          </div>\r\n          <div className=\"modal-body\">{renderFormFields()}</div>\r\n          <div className=\"modal-footer\">\r\n            <button type=\"button\" className=\"btn btn-secondary\" onClick={onClose}>\r\n              Cancel\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              onClick={() => onSubmit(formData)}\r\n            >\r\n              {isEditing ? \"Update\" : \"Save\"}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModalComponent;\r\n","import React, { Component } from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nclass DropDownList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      selectedValue: this.props.selectedValue || (this.props.isMulti ? [] : \"\"),\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.selectedValue !== this.props.selectedValue) {\r\n      this.setState({\r\n        selectedValue: this.props.selectedValue || (this.props.isMulti ? [] : \"\")\r\n      });\r\n    }\r\n  }\r\n\r\n  handleChange = (selectedOptions) => {\r\n    this.setState({\r\n        selectedValue: selectedOptions, // Store the array of selected options directly\r\n    });\r\n    this.props.onUpdateSelectedValue(selectedOptions); // Pass the array to the parent\r\n};\r\n\r\n\r\n  render() {\r\n    const { selectedValue } = this.state;\r\n    const { data, placeholder, width, placeholderColor, menuPlacement, isMulti } = this.props;\r\n\r\n    return (\r\n      <div className={`DropDownList m-1 ${width ? `w-${width}` : \"\"}`}>\r\n        <Select\r\n          className=\"dropdown\"\r\n          placeholder={placeholder}\r\n          value={selectedValue} // Use the selected array directly for multi-select\r\n          options={data}\r\n          onChange={this.handleChange}\r\n          isMulti={isMulti}\r\n          isClearable\r\n          styles={{\r\n            control: (provided) => ({\r\n              ...provided,\r\n              cursor: 'pointer',\r\n            }),\r\n            placeholder: (provided) => ({\r\n              ...provided,\r\n              color: placeholderColor || '#6c757d',\r\n            }),\r\n            menu: (provided) => ({\r\n              ...provided,\r\n              overflow: \"hidden\",\r\n            }),\r\n            menuList: (provided) => ({\r\n              ...provided,\r\n              maxHeight: 200,\r\n              overflowY: \"auto\",\r\n            }),\r\n          }}\r\n          menuPlacement={menuPlacement || \"auto\"}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DropDownList;\r\n","\r\nimport React, { useState, useEffect } from 'react';\r\nimport http from '../http-common';\r\nimport { toast } from 'react-toastify';\r\nimport TableComponent from '../Component/SharedComponent/TableComponent';\r\nimport ModalComponent from '../Component/SharedComponent/ModelComponent';\r\n\r\nconst RecipeCategoryPage = () => {\r\n  const [categories, setCategories] = useState([]);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [editingData, setEditingData] = useState(null);\r\n  const [formData, setFormData] = useState({\r\n    category: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchCategories();\r\n  }, []);\r\n\r\n  const fetchCategories = async () => {\r\n    try {\r\n      const response = await http.get('/categories');\r\n      setCategories(response.data.categories);\r\n    } catch (error) {\r\n      toast.error(\"Error fetching categories!\");\r\n      console.error(\"Error fetching categories!\", error);\r\n    }\r\n  };\r\n\r\n  const handleFormSubmit = async (data) => {\r\n    try {\r\n      let response;\r\n      if (editingData) {\r\n        response = await http.put(`/category/${editingData.id}`, data); // Update category\r\n        toast.success(\"Category updated successfully\");\r\n      } else {\r\n        response = await http.post('/category', data); // Create new category\r\n        toast.success(\"Category created successfully\");\r\n      }\r\n\r\n      setShowModal(false);\r\n      setEditingData(null);\r\n      setFormData({ category: '' });\r\n      fetchCategories(); // Refresh categories list\r\n    } catch (error) {\r\n      toast.error(\"Error saving category!\");\r\n      console.error(\"Error saving category!\", error);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (data) => {\r\n    setEditingData(data);\r\n    setFormData({ category: data.category });\r\n    setShowModal(true);\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    if (window.confirm(\"Are you sure you want to delete this category?\")) {\r\n      try {\r\n        await http.delete(`/category/${id}`); // API endpoint for deleting a category by ID\r\n        fetchCategories();\r\n        toast.success(\"Category deleted successfully\");\r\n      } catch (error) {\r\n        toast.error(\"Error deleting category!\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setShowModal(false);\r\n    setFormData({ category: '' });\r\n    setEditingData(null);\r\n  };\r\n\r\n  const columns = [\r\n    { key: 'category', label: 'Category' },\r\n  ];\r\n\r\n  const formFields = [\r\n    { name: 'category', label: 'Recipe Category', type: 'text', required: true },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"container mt-100\">\r\n      <h2 className='text-center'>Category Page</h2>\r\n\r\n      <div className=\"mt-4\">\r\n        <button\r\n          onClick={() => {\r\n            setFormData({ category: '' }); // Clear the form data\r\n            setEditingData(null);\r\n            setShowModal(true); // Show the modal\r\n          }}\r\n          className=\"btn btn-primary mb-3\"\r\n        >\r\n          Add New Category\r\n        </button>\r\n      </div>\r\n\r\n      {showModal && (\r\n        <ModalComponent\r\n          showModal={showModal}\r\n          header=\"Recipe Category\"\r\n          onClose={handleClose}\r\n          onSubmit={handleFormSubmit}\r\n          isEditing={editingData !== null}\r\n          formData={formData}\r\n          setFormData={setFormData}\r\n          fields={formFields}\r\n        />\r\n      )}\r\n\r\n      <TableComponent\r\n        data={categories}\r\n        columns={columns}\r\n        onEdit={handleEdit}\r\n        onDelete={handleDelete}\r\n        Action={true}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default RecipeCategoryPage;"],"names":["_ref","showModal","header","onClose","onSubmit","isEditing","formData","setFormData","fields","items","uoms","handleChange","e","target","name","value","_jsx","className","tabIndex","role","children","_jsxs","type","onClick","map","field","index","options","item","id","label","itemname","uom","uomname","DropDownList","data","isMulti","selectedValue","placeholder","onUpdateSelectedValue","selectedOption","handleDropdownChange","onChange","Component","constructor","props","super","selectedOptions","this","setState","state","componentDidUpdate","prevProps","render","width","placeholderColor","menuPlacement","Select","isClearable","styles","control","provided","cursor","color","menu","overflow","menuList","maxHeight","overflowY","RecipeCategoryPage","categories","setCategories","useState","setShowModal","editingData","setEditingData","category","useEffect","fetchCategories","async","response","http","get","error","toast","console","ModalComponent","handleClose","put","success","post","required","TableComponent","columns","key","onEdit","onDelete","window","confirm","delete","Action"],"sourceRoot":""}