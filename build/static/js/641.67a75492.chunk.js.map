{"version":3,"file":"static/js/641.67a75492.chunk.js","mappings":"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","sources":["Component/SharedComponent/ChartComponent.js","pages/StorePage.js"],"sourcesContent":["\r\nimport React from \"react\";\r\nimport {\r\n  Chart as ChartJS,\r\n  BarElement,\r\n  LineElement,\r\n  ArcElement,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport { Bar, Line, Pie, Doughnut } from \"react-chartjs-2\";\r\n\r\n// Register required components\r\nChartJS.register(\r\n  BarElement,\r\n  LineElement,\r\n  ArcElement,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst ChartComponent = ({ data, labels, type }) => {\r\n  const chartData = {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        label: \"Inventory Data\",\r\n        data,\r\n        backgroundColor: [\"#36A2EB\", \"#FF6384\", \"#FFCE56\", \"#4BC0C0\"],\r\n        borderColor: [\r\n          \"rgba(75, 192, 192, 1)\",\r\n          \"rgba(255, 99, 132, 1)\",\r\n          \"rgba(54, 162, 235, 1)\",\r\n        ],\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  // Chart options with adjustable height\r\n  const options = {\r\n    maintainAspectRatio: false, // Allow custom height\r\n    responsive: true,\r\n    aspectRatio: 2, // Adjust aspect ratio (width-to-height ratio)\r\n  };\r\n\r\n  return (\r\n    <div style={{ height: \"350px\", width: \"100%\" }}> {/* Set custom height */}\r\n      {type === \"bar\" && <Bar data={chartData} options={options} />}\r\n      {type === \"line\" && <Line data={chartData} options={options} />}\r\n      {type === \"pie\" && <Pie data={chartData} options={options} />}\r\n      {type === \"doughnut\" && <Doughnut data={chartData} options={options} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartComponent;\r\n","\r\n// import React, { useState, useEffect } from \"react\";\r\n// import TableComponent from \"../Component/SharedComponent/TableComponent\";\r\n// import http from \"../http-common\";\r\n// import ChartComponent from \"../Component/SharedComponent/ChartComponent\";\r\n\r\n// const StorePage = () => {\r\n//   const [items, setItems] = useState([]);\r\n//   const [totalItems, setTotalItems] = useState(0);\r\n//   const [currentPage, setCurrentPage] = useState(1);\r\n//   const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n//   // Fetch items with pagination\r\n//   const fetchItems = async () => {\r\n//     try {\r\n//       const response = await http.post(\"/get-items\", {\r\n//         page: currentPage,\r\n//         rowsPerPage,\r\n//       });\r\n//       setItems(response.data.data);\r\n//       setTotalItems(response.data.pagination.totalItems);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching items:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handlePageChange = (newPage) => setCurrentPage(newPage);\r\n\r\n//   const handleRowsPerPageChange = (newRowsPerPage) =>\r\n//     setRowsPerPage(newRowsPerPage);\r\n\r\n//   const handleSearchChange = async (keyword) => {\r\n//     if (keyword) {\r\n//       const { data } = await http.get(`/search/${keyword}`);\r\n//       setItems(data.data);\r\n//     } else {\r\n//       fetchItems();\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchItems(); // Initial fetch\r\n//   }, [currentPage, rowsPerPage]);\r\n\r\n//   const chartLabels = items?.map((item) => item.Item.itemname);\r\n//   const chartData = items?.map((item) => item.quantity);\r\n\r\n//   const columns = [\r\n//     { key: \"Item.itemname\", label: \"Item Name\" },\r\n//     { key: \"quantity\", label: \"Quantity\" },\r\n//     { key: \"Item.Uom.uomname\", label: \"UOM\" },\r\n//   ];\r\n\r\n//   return (\r\n//     <div className=\"container mt-100\">\r\n//       <h2 className=\"mb-4 text-center\">Store Page</h2>\r\n//       <div className=\"row\">\r\n//       <div className=\"col-md-6\">\r\n//           <TableComponent\r\n//             data={items}\r\n//             totalItems={totalItems}\r\n//             columns={columns}\r\n//             currentPage={currentPage}\r\n//             rowsPerPage={rowsPerPage}\r\n//             handleRowsPerPageChange={handleRowsPerPageChange}\r\n//             onPageChange={handlePageChange}\r\n//             handleSearch={handleSearchChange}\r\n//             showSearch={true}\r\n//             pagenation={true}\r\n//             Action={false}\r\n//           />\r\n//         </div>\r\n//         <div className=\"col-md-6 mt-6 mb-3\">\r\n//           <ChartComponent\r\n//             labels={chartLabels}\r\n//             data={chartData}\r\n//             type=\"bar\" \r\n//           />\r\n//         </div>\r\n        \r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default StorePage;\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport TableComponent from \"../Component/SharedComponent/TableComponent\";\r\nimport http from \"../http-common\";\r\nimport ChartComponent from \"../Component/SharedComponent/ChartComponent\";\r\n\r\nconst StorePage = () => {\r\n  const [items, setItems] = useState([]);\r\n  const [totalItems, setTotalItems] = useState(0);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [searchKeyword, setSearchKeyword] = useState(\"\");\r\n  const [debounceTimer, setDebounceTimer] = useState(null); // State for debounce timer\r\n\r\n  // Fetch items with pagination\r\n  const fetchItems = async () => {\r\n    try {\r\n      const response = await http.post(\"/get-items\", {\r\n        page: currentPage,\r\n        rowsPerPage,\r\n      });\r\n      setItems(response.data.data);\r\n      setTotalItems(response.data.pagination.totalItems);\r\n    } catch (error) {\r\n      console.error(\"Error fetching items:\", error);\r\n    }\r\n  };\r\n\r\n  // Custom debounce using setTimeout\r\n  const handleSearchChange = (keyword) => {\r\n    if (debounceTimer) {\r\n      clearTimeout(debounceTimer); // Clear the previous timeout\r\n    }\r\n\r\n    // Set a new timeout for debounce (500ms delay)\r\n    const timer = setTimeout(async () => {\r\n      if (keyword) {\r\n        const { data } = await http.post(\"/search\", {\r\n          itemname: keyword,\r\n          page: currentPage,\r\n          rowsPerPage,\r\n        });\r\n        setItems(data.data);\r\n        setTotalItems(data.pagination.totalItems);\r\n      } else {\r\n        fetchItems(); // If the search keyword is cleared, reset to pagination fetch\r\n      }\r\n    }, 500); // 500ms delay for debounce\r\n\r\n    setDebounceTimer(timer); // Store the timer ID\r\n  };\r\n\r\n  const handlePageChange = (newPage) => setCurrentPage(newPage);\r\n\r\n  const handleRowsPerPageChange = (newRowsPerPage) => {\r\n    setRowsPerPage(newRowsPerPage);\r\n    setCurrentPage(1); // Reset to page 1 on rows per page change\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchItems(); // Initial fetch\r\n  }, [currentPage, rowsPerPage]);\r\n\r\n  const chartLabels = items?.map((item) => item.Item.itemname);\r\n  const chartData = items?.map((item) => item.quantity);\r\n\r\n  const columns = [\r\n    { key: \"Item.itemname\", label: \"Item Name\" },\r\n    { key: \"quantity\", label: \"Quantity\" },\r\n    { key: \"Item.Uom.uomname\", label: \"UOM\" },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"container mt-100\">\r\n      <h2 className=\"mb-4 text-center\">Store Page</h2>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <TableComponent\r\n            data={items}\r\n            totalItems={totalItems}\r\n            columns={columns}\r\n            currentPage={currentPage}\r\n            rowsPerPage={rowsPerPage}\r\n            handleRowsPerPageChange={handleRowsPerPageChange}\r\n            onPageChange={handlePageChange}\r\n            handleSearch={handleSearchChange} // Attach the custom debounced search\r\n            showSearch={true}\r\n            pagenation={true}\r\n            Action={false}\r\n          />\r\n        </div>\r\n        <div className=\"col-md-6 mt-6 mb-3\">\r\n          <ChartComponent\r\n            labels={chartLabels}\r\n            data={chartData}\r\n            type=\"bar\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StorePage;\r\n"],"names":["ChartJS","register","BarElement","LineElement","ArcElement","CategoryScale","LinearScale","PointElement","Tooltip","Legend","_ref","data","labels","type","chartData","datasets","label","backgroundColor","borderColor","borderWidth","options","maintainAspectRatio","responsive","aspectRatio","_jsxs","style","height","width","children","_jsx","Bar","Line","Pie","Doughnut","StorePage","items","setItems","useState","totalItems","setTotalItems","currentPage","setCurrentPage","rowsPerPage","setRowsPerPage","searchKeyword","setSearchKeyword","debounceTimer","setDebounceTimer","fetchItems","async","response","http","post","page","pagination","error","console","useEffect","chartLabels","map","item","Item","itemname","quantity","className","TableComponent","columns","key","handleRowsPerPageChange","newRowsPerPage","onPageChange","newPage","handleSearch","keyword","clearTimeout","timer","setTimeout","showSearch","pagenation","Action","ChartComponent"],"sourceRoot":""}