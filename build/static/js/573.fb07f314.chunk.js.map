{"version":3,"file":"static/js/573.fb07f314.chunk.js","mappings":"+LAMA,MAkGA,EAlGuBA,KACrB,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,IACxCG,EAAaC,IAAkBJ,EAAAA,EAAAA,UAAS,KACxCK,EAAYC,IAAiBN,EAAAA,EAAAA,UAAS,KACtCO,EAAWC,IAAgBR,EAAAA,EAAAA,UAAS,IAE3CS,EAAAA,EAAAA,YAAU,KACRC,GAAY,GACX,CAACT,EAAaE,EAAaE,IAE9B,MAAMK,EAAaC,UACjB,IACE,MAAMC,QAAiBC,EAAAA,EAAKC,KAAK,gBAAiB,CAChDC,KAAMd,EACNe,MAAOb,IAGTJ,EAASa,EAASK,KAAKnB,OACvBU,EAAaI,EAASK,KAAKC,WAAWC,WACxC,CAAE,MAAOC,GAAQ,IAADC,EAAAC,EACdC,EAAAA,GAAMH,OAAoB,QAAdC,EAAAD,EAAMR,gBAAQ,IAAAS,GAAM,QAANC,EAAdD,EAAgBJ,YAAI,IAAAK,OAAN,EAAdA,EAAsBE,UAAW,wBAC/C,GAqCIC,EAAU,CACd,CAAEC,IAAK,OAAQC,MAAO,QACtB,CAAED,IAAK,WAAYC,MAAO,YAC1B,CAAED,IAAK,QAASC,MAAO,SACvB,CACED,IAAK,WACLC,MAAO,SACPC,OAAQA,CAACC,EAAUC,KACjBC,EAAAA,EAAAA,KAAA,UACEC,UAAW,eAAcH,EAAW,cAAgB,cACpDI,QAASA,IA1BUtB,OAAOuB,EAAIL,KACpC,WACyBhB,EAAAA,EAAKsB,IAAI,uBAAwB,CACtDD,KACAL,cAGWZ,KAAKmB,UAChBb,EAAAA,GAAMa,QAAQ,QAAQP,EAAW,YAAc,+BAC/CnB,IAEJ,CAAE,MAAOU,GAAQ,IAADiB,EAAAC,EACdf,EAAAA,GAAMH,OAAoB,QAAdiB,EAAAjB,EAAMR,gBAAQ,IAAAyB,GAAM,QAANC,EAAdD,EAAgBpB,YAAI,IAAAqB,OAAN,EAAdA,EAAsBd,UAAW,8BAC/C,GAaqBe,CAAmBT,EAAII,IAAKL,GAAUW,SAEpDX,EAAW,SAAW,eAM/B,OACEY,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEC,UAAW,QAAUX,UAAU,YAAWQ,SAAA,EACtDT,EAAAA,EAAAA,KAAA,MAAIC,UAAU,cAAaQ,SAAC,iCAE5BT,EAAAA,EAAAA,KAACa,EAAAA,EAAc,CACb3B,KAAMnB,EACN2B,QAASA,EACTxB,YAAaA,EACbE,YAAaA,EACb0C,wBAzD2BC,IAC/B1C,EAAe0C,EAAe,EAyD1BC,aA9DoBC,IACxB9C,EAAe8C,EAAQ,EA8DnBC,aAvDqBtC,UAEzB,GADAL,EAAc4C,GACVA,EAAS,CACX,MAAM,KAAEjC,SAAeJ,EAAAA,EAAKsC,IAAI,iBAAiBD,KACjDnD,EAASkB,EAAKnB,MAChB,MACEY,GACF,EAiDI0C,YAAY,EACZC,WAAY9C,EACZ+C,YAAY,EACZC,QAAQ,MAEN,C","sources":["pages/UserStatusPage.js"],"sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\nimport http from '../http-common';\r\nimport TableComponent from '../Component/SharedComponent/TableComponent';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst UserStatusPage = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [totalItem, setTotalItem] = useState(0);\r\n\r\n  useEffect(() => {\r\n    fetchUsers();\r\n  }, [currentPage, rowsPerPage, searchTerm]);\r\n\r\n  const fetchUsers = async () => {\r\n    try {\r\n      const response = await http.post('/users-status', {\r\n        page: currentPage,\r\n        limit: rowsPerPage,\r\n      });\r\n\r\n      setUsers(response.data.users);\r\n      setTotalItem(response.data.pagination.totalUsers);\r\n    } catch (error) {\r\n      toast.error(error.response?.data?.message || 'Something went wrong!');\r\n    }\r\n  };\r\n\r\n  const handlePageChange = (newPage) => {\r\n    setCurrentPage(newPage);\r\n  };\r\n\r\n  const handleRowsPerPageChange = (newRowsPerPage) => {\r\n    setRowsPerPage(newRowsPerPage);\r\n  };\r\n\r\n  const handleSearchChange = async (keyword) => {\r\n    setSearchTerm(keyword);\r\n    if (keyword) {\r\n      const { data } = await http.get(`/search-users/${keyword}`);\r\n      setUsers(data.users);\r\n    } else { \r\n      fetchUsers();\r\n    }\r\n  };\r\n\r\n  const handleStatusChange = async (id, isActive) => {\r\n    try {\r\n      const response = await http.put('/update-users-status', {\r\n        id,\r\n        isActive,\r\n      });\r\n\r\n      if (response.data.success) {\r\n        toast.success(`User ${isActive ? 'activated' : 'deactivated'} successfully!`);\r\n        fetchUsers(); // Refresh the user list\r\n      }\r\n    } catch (error) {\r\n      toast.error(error.response?.data?.message || 'Error updating user status!');\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    { key: 'name', label: 'Name' },\r\n    { key: 'username', label: 'Username' },\r\n    { key: 'email', label: 'Email' },\r\n    {\r\n      key: 'isActive',\r\n      label: 'Status',\r\n      render: (isActive, row) => (\r\n        <button\r\n          className={`btn btn-sm ${isActive ? 'btn-success' : 'btn-danger'}`}\r\n          onClick={() => handleStatusChange(row.id, !isActive)}\r\n        >\r\n          {isActive ? 'Active' : 'Inactive'}\r\n        </button>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div style={{ marginTop: '20vh' }} className=\"container\">\r\n      <h2 className='text-center'>User Status Management page</h2>\r\n\r\n      <TableComponent\r\n        data={users}\r\n        columns={columns}\r\n        currentPage={currentPage}\r\n        rowsPerPage={rowsPerPage}\r\n        handleRowsPerPageChange={handleRowsPerPageChange}\r\n        onPageChange={handlePageChange}\r\n        handleSearch={handleSearchChange}\r\n        showSearch={false}\r\n        totalItems={totalItem}\r\n        pagenation={true}\r\n        Action={false} // No edit/delete actions needed\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserStatusPage;"],"names":["UserStatusPage","users","setUsers","useState","currentPage","setCurrentPage","rowsPerPage","setRowsPerPage","searchTerm","setSearchTerm","totalItem","setTotalItem","useEffect","fetchUsers","async","response","http","post","page","limit","data","pagination","totalUsers","error","_error$response","_error$response$data","toast","message","columns","key","label","render","isActive","row","_jsx","className","onClick","id","put","success","_error$response2","_error$response2$data","handleStatusChange","children","_jsxs","style","marginTop","TableComponent","handleRowsPerPageChange","newRowsPerPage","onPageChange","newPage","handleSearch","keyword","get","showSearch","totalItems","pagenation","Action"],"sourceRoot":""}